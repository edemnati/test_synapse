{
	"name": "Notebook test spark",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "myspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "2b85fcbc-5c12-4b38-8ab0-51c848af4218"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e0d7a68e-191f-4f51-83ce-d93995cd5c09/resourceGroups/my_ml_tests/providers/Microsoft.Synapse/workspaces/ez-az-synapse-test/bigDataPools/myspark",
				"name": "myspark",
				"type": "Spark",
				"endpoint": "https://ez-az-synapse-test.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/myspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"df = spark.read.parquet(\"abfss://ez-filesystem@ezmylake.dfs.core.windows.net/*/psaprod.cc_address.parquet\")\r\n",
					"\r\n",
					"display(df.limit(10))"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.write.parquet(\"abfss://ez-filesystem@ezmylake.dfs.core.windows.net/*/psaprod.cc_address_test2.parquet\")"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.read.load('abfss://ez-filesystem@ezmylake.dfs.core.windows.net/NYCTripSmall.parquet', format='parquet')\r\n",
					"display(df.limit(10))"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.write.format(\"delta\").mode(\"overwrite\").save(\"abfss://ez-filesystem@ezmylake.dfs.core.windows.net/ez-filesystem/test_delta\")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%pyspark\r\n",
					"spark.sql(\"CREATE DATABASE IF NOT EXISTS wsib_spark_db\")\r\n",
					"df.write.mode(\"overwrite\").saveAsTable(\"wsib_spark_db.trip\")"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.sql(\"SELECT * FROM nyctaxi.trip\") \r\n",
					"display(df)"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.sql(\"\"\"\r\n",
					"   SELECT PassengerCount,\r\n",
					"       SUM(TripDistanceMiles) as SumTripDistance,\r\n",
					"       AVG(TripDistanceMiles) as AvgTripDistance\r\n",
					"   FROM nyctaxi.trip\r\n",
					"   WHERE TripDistanceMiles > 0 AND PassengerCount > 0\r\n",
					"   GROUP BY PassengerCount\r\n",
					"   ORDER BY PassengerCount\r\n",
					"\"\"\") \r\n",
					"display(df)\r\n",
					"df.write.mode(\"overwrite\").saveAsTable(\"nyctaxi.passengercountstats\")"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import sum,avg,max,count\r\n",
					"# Read parquet file\r\n",
					"df = spark.read.parquet(\"abfss://ez-filesystem@ezmylake.dfs.core.windows.net/wsib_raw_tables/psaprod.cc_claim.parquet/\")\r\n",
					"display(df)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Using pyspark functions to read, transform and write data\r\n",
					"\r\n",
					"from pyspark.sql.functions import sum,avg,max,count\r\n",
					"# Read parquet file\r\n",
					"df = spark.read.parquet(\"abfss://ez-filesystem@ezmylake.dfs.core.windows.net/wsib_raw_tables/psaprod.cc_claim.parquet/\")\r\n",
					"\r\n",
					"# Aggregate data using SQL statement\r\n",
					"df_agg = df.groupBy(\"WSIB_ClaimType\").agg(sum(\"PriorSimilarCond_WC\").alias(\"PriorSimilarCond_WC_sum\"), sum(\"WSIB_iseAdjudicatedAllowed\").alias(\"WSIB_iseAdjudicatedAllowed_sum\"))\r\n",
					"\r\n",
					"# Save result to parquet file\r\n",
					"df_agg.write.mode(\"overwrite\").parquet(\"abfss://ez-filesystem@ezmylake.dfs.core.windows.net/transformed_data/cc_claim_agg_test.parquet\")\r\n",
					"\r\n",
					"display(df_agg)\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Using pyspark SQL to read, transform and write data\r\n",
					"from pyspark.sql.functions import sum,avg,max,count\r\n",
					"# Read parquet file\r\n",
					"df = spark.read.parquet(\"abfss://ez-filesystem@ezmylake.dfs.core.windows.net/wsib_raw_tables/psaprod.cc_claim.parquet/\")\r\n",
					"\r\n",
					"# Save data as table\r\n",
					"spark.sql(\"CREATE DATABASE IF NOT EXISTS wsib_spark_db\")\r\n",
					"df.write.mode(\"overwrite\").saveAsTable(\"wsib_spark_db.cc_claim\")\r\n",
					"\r\n",
					"# Aggregate data using SQL statement\r\n",
					"df_agg2 = spark.sql(\"\"\" SELECT  WSIB_ClaimType, \r\n",
					"            sum(PriorSimilarCond_WC) as sum_PriorSimilarCond_WC,\r\n",
					"            sum(WSIB_iseAdjudicatedAllowed) as sum_WSIB_iseAdjudicatedAllowed\r\n",
					"            FROM wsib_spark_db.cc_claim\r\n",
					"            GROUP BY WSIB_ClaimType\r\n",
					"          \"\"\")\r\n",
					"# Save result to parquet file\r\n",
					"df_agg2.write.mode(\"overwrite\").parquet(\"abfss://ez-filesystem@ezmylake.dfs.core.windows.net/wsib_raw_tables/cc_claim_agg_test_sql.parquet/\")\r\n",
					"\r\n",
					"display(df_agg2)\r\n",
					""
				],
				"execution_count": 18
			}
		]
	}
}