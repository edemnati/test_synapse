{
	"name": "SQL script 2",
	"properties": {
		"content": {
			"query": "\n--------------------------------------------------------------------------\n-- Read data from data lake\n--------------------------------------------------------------------------\n--CSV: Specify column name and type\nSELECT TOP 100 *\nFROM OPENROWSET(\n    BULK 'https://mydatalake.blob.core.windows.net/data/files/*.csv',\n    FORMAT = 'csv',\n    PARSER_VERSION = '2.0')\nWITH (\n    product_id INT,\n    product_name VARCHAR(20) COLLATE Latin1_General_100_BIN2_UTF8,\n    list_price DECIMAL(5,2)\n) AS rows\n\n\n--json\n/*\nInsert JSON data - JSON data can be inserted using the usual T-SQL INSERT statements.\n\nRead JSON data - JSON data can be read using the following T-SQL functions and provides the ability to perform aggregation and filter on JSON values.\n\nISJSON – verify if text is valid JSON\nJSON_VALUE – extract a scalar value from a JSON string\nJSON_QUERY – extract a JSON object or array from a JSON string\nModify JSON data - JSON data can be modified and queried using the following T-SQL functions providing ability to update JSON string using T-SQL and convert hierarchical data into flat tabular structure.\n\nJSON_MODIFY – modifies a value in a JSON string\nOPENJSON – convert JSON collection to a set of rows and columns\nYou can also query JSON files using SQL serverless. The query's objective is to read the following type of JSON files using OPENROWSET.\n\nStandard JSON files where multiple JSON documents are stored as a JSON array.\nLine-delimited JSON files, where JSON documents are separated with new-line character. Common extensions for these types of files are jsonl, ldjson, and ndjson.\n*/\nSELECT doc,\nJSON_VALUE(doc, '$.product_name') AS product,\nJSON_VALUE(doc, '$.list_price') AS price\nFROM\n    OPENROWSET(\n        BULK 'https://mydatalake.blob.core.windows.net/data/files/*.json',\n        FORMAT = 'csv',\n        FIELDTERMINATOR ='0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0b' --> You need to override rowterminator to read classic JSON \n    ) WITH (doc NVARCHAR(MAX)) as rows\n\n--parquet partitioned\nSELECT *\nFROM OPENROWSET(\n    BULK 'https://mydatalake.blob.core.windows.net/data/orders/year=*/month=*/*.*',\n    FORMAT = 'parquet') AS orders\nWHERE orders.filepath(1) = '2020'\n    AND orders.filepath(2) IN ('1','2');\n\n--------------------------------------------------------------------------\n--------------------------------------------------------------------------\n--------------------------------------------------------------------------\nSELECT\n    TOP 10 *\nFROM\n    OPENROWSET(\n        BULK 'https://ezmylake.dfs.core.windows.net/ez-filesystem/transformed_data/500803AB-8A0F-459E-BBB5-B7F73C616717_44_0-1.parquet',\n        FORMAT='PARQUET'\n    ) AS [result]\n\nSELECT TOP 10 *\nFROM\n    OPENROWSET(\n        BULK 'https://ezmylake.dfs.core.windows.net/ez-filesystem/NYCTripSmall.parquet',\n        DATA_SOURCE = 'test_ds',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nselect * from dbo.test_save_table;\n\n\n--------------------------------------\nCREATE DATABASE DataExplorationDB \n                COLLATE Latin1_General_100_BIN2_UTF8\n\nUSE DataExplorationDB\n\nCREATE LOGIN data_explorer_test WITH PASSWORD = 'MyPass7878';    \nGO\nCREATE USER data_explorer_test FOR LOGIN data_explorer_test;\nGO\nGRANT ADMINISTER DATABASE BULK OPERATIONS TO data_explorer_test;\nGO\n\n\n\n\nselect CURRENT_USER  ;\n\n-- Create a db master key if one does not already exist, using your own password.\nCREATE MASTER KEY ENCRYPTION BY PASSWORD='MyStrongPass7878';\n\n-- Create a database scoped credential.\nCREATE DATABASE SCOPED CREDENTIAL MyCredentials3\nWITH IDENTITY = 'SHARED ACCESS SIGNATURE',\nSECRET = '?sv=2021-06-08&ss=bfqt&srt=sco&sp=rwdlacupyx&se=2022-10-17T22:02:29Z&st=2022-10-17T14:02:29Z&spr=https&sig=m6ffyPdjVsCMNvJ%2BUoMfpqXvbO2uHFJSX%2F8yN81g8OI%3D';\n\nGRANT REFERENCES ON DATABASE SCOPED CREDENTIAL::MyCredentials3 TO data_explorer_test\nGO\n\n--https://ezmylake.dfs.core.windows.net/\nCREATE EXTERNAL DATA SOURCE ContosoLake_test3\nWITH ( LOCATION = 'https://ezmylake.dfs.core.windows.net',\n        CREDENTIAL = MyCredentials3\n    )\n\n--Create external table\n\nUSE [DataExplorationDB];\nGO\n\nCREATE EXTERNAL FILE FORMAT ParquetFormat WITH (  FORMAT_TYPE = PARQUET );\ndrop EXTERNAL TABLE NYCTripSmall3;\nCREATE EXTERNAL TABLE NYCTripSmall3\n(\n    [DateID] int,\n     [MedallionID] int,\n     [HackneyLicenseID] int,\n     [PickupTimeID] int,\n     [DropoffTimeID] int,\n     [PickupGeographyID] int,\n     [DropoffGeographyID] int,\n     [PickupLatitude] float,\n     [PickupLongitude] float,\n     [PickupLatLong] nvarchar(4000),\n     [DropoffLatitude] float,\n     [DropoffLongitude] float,\n     [DropoffLatLong] nvarchar(4000),\n     [PassengerCount] int,\n     [TripDurationSeconds] int,\n     [TripDistanceMiles] float,\n     [PaymentType] nvarchar(4000),\n     [FareAmount] numeric(19,4),\n     [SurchargeAmount] numeric(19,4),\n     [TaxAmount] numeric(19,4),\n     [TipAmount] numeric(19,4),\n     [TollsAmount] numeric(19,4),\n     [TotalAmount] numeric(19,4)\n)\nWITH (\n    LOCATION = '/ez-filesystem/NYCTripSmall.parquet',\n    DATA_SOURCE = ContosoLake_test3,\n    FILE_FORMAT = ParquetFormat\n);\n\nGRANT SELECT ON dbo.NYCTripSmall3 TO data_explorer_test;\nselect top(10) * from dbo.NYCTripSmall3\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "DB_test",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}